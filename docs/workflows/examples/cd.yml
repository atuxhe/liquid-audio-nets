# Continuous Deployment Pipeline for liquid-audio-nets
# This file should be placed in .github/workflows/cd.yml
# Manual creation required due to GitHub App permission limitations

name: CD

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libasound2-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio
    
    - name: Build Python wheels
      run: |
        pip install maturin
        maturin build --release --target ${{ matrix.target }}
    
    - name: Test installation
      run: |
        pip install target/wheels/*.whl
        python -c "import liquid_audio_nets; print('Installation successful')"
    
    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: target/wheels/*.whl

  build-embedded:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf  # ARM Cortex-M4/M7 with FPU
          - thumbv6m-none-eabi     # ARM Cortex-M0/M0+
          - riscv32imac-unknown-none-elf  # RISC-V
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install ARM toolchain
      if: startsWith(matrix.target, 'thumb')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
    
    - name: Build for embedded target
      run: |
        cargo build --target ${{ matrix.target }} --release --no-default-features --features embedded
    
    - name: Check binary size
      run: |
        ls -la target/${{ matrix.target }}/release/
        python scripts/analyze_binary_size.py target/${{ matrix.target }}/release/
    
    - name: Upload embedded binaries
      uses: actions/upload-artifact@v3
      with:
        name: embedded-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Rust security audit
      run: |
        cargo install cargo-audit
        cargo audit
    
    - name: Python security audit
      run: |
        pip install safety
        safety check --json --output safety-report.json
        
    - name: SBOM generation
      run: |
        cargo install cargo-cyclonedx
        cargo cyclonedx --format json --output sbom.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          sbom.json

  publish-pypi:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: wheels-*
        path: dist/
        merge-multiple: true
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

  publish-crates:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Publish to crates.io
      run: |
        cargo login ${{ secrets.CRATES_IO_TOKEN }}
        cargo publish

  create-github-release:
    needs: [build-and-test, build-embedded, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-artifacts/
    
    - name: Create release archive
      run: |
        tar -czf liquid-audio-nets-${{ github.ref_name }}.tar.gz release-artifacts/
    
    - name: Generate release notes
      run: |
        python scripts/generate_release_notes.py ${{ github.ref_name }} > release-notes.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: liquid-audio-nets ${{ github.ref_name }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: liquid-audio-nets-${{ github.ref_name }}.tar.gz
        asset_name: liquid-audio-nets-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  update-documentation:
    needs: [publish-pypi, publish-crates]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install documentation dependencies
      run: |
        pip install -e .[dev,docs]
    
    - name: Build and deploy documentation
      run: |
        make docs
        # Deploy updated documentation for the new version
        python scripts/deploy_docs.py ${{ github.ref_name }}

  notify-stakeholders:
    needs: [create-github-release, update-documentation]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'release'
    
    steps:
    - name: Notify on Slack
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üöÄ liquid-audio-nets ${{ github.ref_name }} has been released successfully!"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚ùå liquid-audio-nets ${{ github.ref_name }} release failed. Please check the logs."}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}