# CI/CD Pipeline for liquid-audio-nets
# This file should be placed in .github/workflows/ci.yml
# Manual creation required due to GitHub App permission limitations

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=liquid_audio_nets --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  test-rust:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
    
    - name: Cache Cargo packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run Rust tests
      run: cargo test --all-features
    
    - name: Test embedded targets
      run: |
        rustup target add thumbv7em-none-eabihf
        cargo check --target thumbv7em-none-eabihf --no-default-features

  test-cpp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake gcc-arm-none-eabi
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    
    - name: Build C++ components
      run: cmake --build build --config Debug
    
    - name: Run C++ tests
      run: |
        cd build
        ctest --output-on-failure

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit (Rust)
      run: |
        cargo install cargo-audit
        cargo audit
    
    - name: Run security checks (Python)
      run: |
        pip install safety bandit
        safety check
        bandit -r python/ -f json -o bandit-report.json
        
    - name: Secret scanning
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        pip install -e .[dev,test]
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/performance/ -v --benchmark-only
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  embedded-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ARM toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
    
    - name: Install Rust embedded targets
      run: |
        rustup target add thumbv7em-none-eabihf
        rustup target add thumbv6m-none-eabi
    
    - name: Build for STM32F4
      run: |
        cargo build --target thumbv7em-none-eabihf --no-default-features --features embedded
    
    - name: Build for nRF52
      run: |
        cargo build --target thumbv7em-none-eabihf --no-default-features --features embedded,nrf52
    
    - name: Check binary sizes
      run: |
        python scripts/check_binary_sizes.py target/thumbv7em-none-eabihf/debug/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-python, test-rust, test-cpp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        python -m pip install -e .[dev,test]
        rustup toolchain install stable
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --timeout=300
    
    - name: Test cross-language bindings
      run: |
        python -c "import liquid_audio_nets; print('Python bindings OK')"
        cargo test --test python_integration

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install documentation dependencies
      run: |
        pip install -e .[dev,docs]
    
    - name: Build documentation
      run: |
        make docs
    
    - name: Check documentation links
      run: |
        python scripts/check_doc_links.py
    
    - name: Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        # Deploy to GitHub Pages or documentation hosting service
        echo "Documentation deployment would happen here"